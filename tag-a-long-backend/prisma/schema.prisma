// Prisma schema for Tag a Long

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  phone             String?
  password_hash     String
  display_name      String
  username          String              @unique
  bio               String?
  profile_photo_url String?
  city              String
  instagram_handle  String?
  date_of_birth     DateTime
  is_active         Boolean             @default(true)
  created_at        DateTime            @default(now())
  last_active       DateTime            @default(now())

  listings          Listing[]
  requests          TagAlongRequest[]   @relation("Requester")
  notifications     Notification[]
  fcm_tokens        FcmToken[]

  @@index([city])
  @@index([username])
  @@map("users")
}

model Listing {
  id          String              @id @default(uuid())
  user_id     String
  photo_url   String
  caption     String
  time_text   String?
  city        String
  latitude    Float?
  longitude   Float?
  is_active   Boolean             @default(true)
  view_count  Int                 @default(0)
  created_at  DateTime            @default(now())
  expires_at  DateTime

  user        User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  requests    TagAlongRequest[]

  @@index([city, is_active, created_at])
  @@index([user_id, created_at])
  @@index([expires_at])
  @@map("listings")
}

model TagAlongRequest {
  id            String    @id @default(uuid())
  listing_id    String
  requester_id  String
  status        String    @default("pending")
  created_at    DateTime  @default(now())
  responded_at  DateTime?

  listing       Listing   @relation(fields: [listing_id], references: [id], onDelete: Cascade)
  requester     User      @relation("Requester", fields: [requester_id], references: [id], onDelete: Cascade)

  @@unique([listing_id, requester_id])
  @@index([listing_id, status])
  @@index([requester_id, status])
  @@map("tag_along_requests")
}

model Notification {
  id         String    @id @default(uuid())
  user_id    String
  type       String
  title      String
  body       String
  data       String?
  is_read    Boolean   @default(false)
  created_at DateTime  @default(now())

  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, is_read, created_at])
  @@map("notifications")
}

model FcmToken {
  id          String   @id @default(uuid())
  user_id     String
  token       String
  device_type String?
  created_at  DateTime @default(now())

  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, token])
  @@map("fcm_tokens")
}
